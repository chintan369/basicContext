(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.basicContext = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _overflow = require('./overflow');

var overflow = _interopRequireWildcard(_overflow);

var _coordinates = require('./coordinates');

var coordinates = _interopRequireWildcard(_coordinates);

var _basicContextItem = require('./basicContextItem');

var _basicContextItem2 = _interopRequireDefault(_basicContextItem);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var basicContext = (function () {
	function basicContext(e, items) {
		var _this = this;

		var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

		_classCallCheck(this, basicContext);

		items = items.slice();
		opts = (0, _objectAssign2['default'])({}, opts);

		this.id = null;
		this.items = items;
		this.opts = opts;
		this.position = null;
		this.elem = null;

		this.parse = this.parse.bind(this);
		this.active = this.active.bind(this);
		this.visible = this.visible.bind(this);
		this.close = this.close.bind(this);
		this.show = this.show.bind(this);
		this.showSub = this.showSub.bind(this);
		this.hideSub = this.hideSub.bind(this);
		this.close = this.close.bind(this);

		// Generate the id of the context
		var id = this.id = +new Date();

		// Parse the options
		this.parse();

		// Save current overflow and block scrolling of site
		overflow.set();

		// Create items
		items.forEach(function (item, num) {

			var parent = _this,
			    opts = { num: num, parent: parent };

			items[num] = (0, _basicContextItem2['default'])(item, opts);
		});

		// Render and add context to the body
		if (opts.parent == null) document.body.insertAdjacentHTML('beforeend', this.render());else document.querySelector('.basicContextContainer').insertAdjacentHTML('beforeend', this.render());

		// Select the newly created context
		var elem = this.elem = document.querySelector('.basicContext[data-id=\'' + id + '\']');

		// Cache the context
		this.link(elem);

		// Calculate position
		var position = this.position = coordinates.get(e, elem);

		// Show the context
		opts.show();

		// Bind events on context
		this.bind();

		// Bind events on items
		items.forEach(function (item, i) {

			var elem = _this.elem.querySelector('.basicContext__item[data-num=\'' + i + '\']');

			item.setElem(elem);
			item.setEvents();
		});

		// Call callback when a function
		opts.callback();

		// Do not trigger default event or further propagation
		if (typeof e.preventDefault === 'function') e.preventDefault();
		if (typeof e.stopPropagation === 'function') e.stopPropagation();

		return true;
	}

	_createClass(basicContext, [{
		key: 'parse',
		value: function parse() {

			var opts = this.opts;

			if (opts.parent && opts.parent.constructor.name !== 'basicContext') opts.parent = null;

			if (opts['class'] == null) opts['class'] = '';
			if (opts.parent != null) opts['class'] += ' basicContext--child';

			if (typeof opts.show !== 'function') opts.show = this.show;
			if (typeof opts.close !== 'function') opts.close = this.close;
			if (typeof opts.callback !== 'function') opts.callback = function () {};

			return true;
		}
	}, {
		key: 'link',
		value: function link(elem) {

			this.elem = elem;

			return true;
		}
	}, {
		key: 'bind',
		value: function bind() {
			var _this2 = this;

			var elem = this.elem,
			    opts = this.opts;

			if (opts.parent == null) {

				elem.parentElement.onclick = opts.close;
				elem.parentElement.oncontextmenu = opts.close;
			}

			elem.onmouseenter = function () {

				if (opts.child != null) _this2.hideSub();
			};

			return true;
		}
	}, {
		key: 'show',
		value: function show() {

			var elem = this.elem,
			    position = this.position;

			elem.style.top = position.y + 'px';
			elem.style.left = position.x + 'px';
			elem.style.transformOrigin = position.rx + 'px ' + position.ry + 'px';
			elem.style.opacity = 1;

			return true;
		}
	}, {
		key: 'showSub',
		value: function showSub(items, itemElem, itemActiveFn) {
			var _this3 = this;

			var opts = this.opts,
			    itemSize = itemElem.getBoundingClientRect();

			// Don't open a new child when a child is already visible
			if (opts.child != null) return false;

			var close = function close() {

				if (opts.child != null) {

					// Only close child when hovered item
					// is not the producer of the child
					if (itemActiveFn() === false) {

						// Remove highlight from item
						itemElem.classList.remove('basicContext__item--hover');

						opts.child.close();
						return true;
					}
				} else {

					_this3.close();
					return true;
				}

				return false;
			};

			opts.child = new basicContext({
				clientX: itemSize.left + itemSize.width,
				clientY: itemSize.top
			}, items, {
				parent: this,
				close: close
			});

			// Highlight current item
			itemElem.classList.add('basicContext__item--hover');

			return true;
		}
	}, {
		key: 'hideSub',
		value: function hideSub() {

			var opts = this.opts;

			if (opts.child == null) return false;
			if (opts.child.active() === true) return false;

			if (opts.child.opts.close() === true) opts.child = null;

			return true;
		}
	}, {
		key: 'active',
		value: function active() {

			var id = this.id,
			    elem = this.elem;

			return elem.parentElement.querySelector('.basicContext[data-id=\'' + id + '\']:hover') == null ? false : true;
		}
	}, {
		key: 'visible',
		value: function visible() {

			var elem = this.elem;

			if (elem == null || elem.length === 0) return false;else return true;
		}
	}, {
		key: 'close',
		value: function close() {

			if (this.visible() === false) return false;

			var opts = this.opts,
			    elem = this.elem,
			    container = elem.parentElement;

			// Close child first
			if (opts.child != null) opts.child.close();

			if (opts.parent == null) container.parentElement.removeChild(container);else elem.parentElement.removeChild(elem);

			// Reset overflow to its original value
			overflow.reset();

			return true;
		}
	}, {
		key: 'render',
		value: function render() {

			var id = this.id,
			    items = this.items,
			    opts = this.opts,
			    html = '';

			// Render items
			items.forEach(function (item) {
				return html += item.render();
			});

			// Wrap context around items
			html = this.renderContext(id, opts, html);

			// Wrap container around context when context is not a child
			if (opts.parent == null) html = this.renderContainer(html);

			return html;
		}
	}, {
		key: 'renderContext',
		value: function renderContext(id, opts, itemsHTML) {

			return '\n\t\t       <div class="basicContext ' + opts['class'] + '" data-id="' + id + '">\n\t\t           <table>\n\t\t               <tbody>\n\t\t                   ' + itemsHTML + '\n\t\t               </tbody>\n\t\t           </table>\n\t\t       </div>\n\t\t       ';
		}
	}, {
		key: 'renderContainer',
		value: function renderContainer(contextHTML) {

			return '\n\t\t       <div class="basicContextContainer">\n\t\t           ' + contextHTML + '\n\t\t       </div>\n\t\t       ';
		}
	}]);

	return basicContext;
})();

exports['default'] = basicContext;
module.exports = exports['default'];

},{"./basicContextItem":3,"./coordinates":4,"./overflow":5,"object-assign":1}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var ITEM = 'ITEM',
    SEPARATOR = 'SEPARATOR';

exports['default'] = function () {
	var item = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	var elem = null;

	var parseItem = function parseItem() {

		item = (0, _objectAssign2['default'])({}, item);

		// Set default values
		if (item.type == null) item.type = Object.keys(item).length === 0 ? SEPARATOR : ITEM;
		if (item.content == null) item.content = 'Undefined';
		if (item['class'] == null) item['class'] = '';

		// Set default function when fn is missing
		if (typeof item.fn !== 'function') item.fn = function () {};

		// Add disabled class when item disabled
		if (item.disabled !== true) item.disabled = false;
		if (item.disabled === true) item['class'] += ' basicContext__item--disabled';

		// Add invisible class when invisible
		if (item.visible !== false) item.visible = true;
		if (item.visible === false) item['class'] += ' basicContext__item--invisible';

		return true;
	};

	var parseOpts = function parseOpts() {

		opts = (0, _objectAssign2['default'])({}, opts);

		if (opts.parent && opts.parent.constructor.name !== 'basicContext') opts.parent = null;

		return true;
	};

	var setElem = function setElem(newElem) {

		elem = newElem;
	};

	var isActive = function isActive() {

		return elem.parentElement.querySelector('.basicContext__item[data-num=\'' + opts.num + '\']:hover') == null ? false : true;
	};

	var setEvents = function setEvents() {

		if (elem == null) return false;
		if (item.disabled === true) return false;

		elem.onclick = item.fn;
		elem.oncontextmenu = item.fn;

		if (item.items != null) {
			(function () {

				var timeout = null;

				elem.onmouseenter = function () {
					clearTimeout(timeout);
					timeout = setTimeout(function () {
						return opts.parent.showSub(item.items, elem, isActive);
					}, 150);
				};

				elem.onmouseleave = function () {
					clearTimeout(timeout);
					opts.parent.hideSub();
				};
			})();
		}

		return true;
	};

	var render = function render() {

		if (item.type === ITEM) return renderItem();
		if (item.type === SEPARATOR) return renderSeparator();
	};

	var renderItem = function renderItem() {

		return '\n\t\t       <tr class="basicContext__item ' + item['class'] + '" data-num="' + opts.num + '">\n\t\t           <td class=\'basicContext__data\'>' + item.content + '</td>\n\t\t       </tr>\n\t\t       ';
	};

	var renderSeparator = function renderSeparator() {

		return '\n\t\t       <tr class="basicContext__item basicContext__item--separator"></tr>\n\t\t       ';
	};

	parseItem();
	parseOpts();

	return {
		setElem: setElem,
		setEvents: setEvents,
		render: render
	};
};

module.exports = exports['default'];

},{"object-assign":1}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
var normalize = function normalize() {
	var e = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var pos = {
		x: e.clientX,
		y: e.clientY
	};

	if (e.type === 'touchend' && (pos.x == null || pos.y == null)) {

		// We need to capture clientX and clientY from original event
		// when the event 'touchend' does not return the touch position

		var touches = e.changedTouches;

		if (touches != null && touches.length > 0) {
			pos.x = touches[0].clientX;
			pos.y = touches[0].clientY;
		}
	}

	// Position unknown
	if (pos.x == null || pos.x < 0) pos.x = 0;
	if (pos.y == null || pos.y < 0) pos.y = 0;

	return pos;
};

var get = function get(e, elem) {

	var normalizedPosition = normalize(e);

	// Set the initial position
	var x = normalizedPosition.x,
	    y = normalizedPosition.y;

	// Get size of browser
	var browserSize = {
		width: window.innerWidth,
		height: window.innerHeight
	};

	// Get size of elem
	var elemSize = {
		width: elem.offsetWidth,
		height: elem.offsetHeight
	};

	// Fix position based on elem and browser size
	if (x + elemSize.width > browserSize.width) x = x - (x + elemSize.width - browserSize.width);
	if (y + elemSize.height > browserSize.height) y = y - (y + elemSize.height - browserSize.height);

	// Make elem scrollable and start at the top of the browser
	// when elem is higher than the browser
	if (elemSize.height > browserSize.height) {
		y = 0;
		elem.classList.add('basicContext--scrollable');
	}

	// Calculate the relative position of the mouse to the elem
	var rx = normalizedPosition.x - x,
	    ry = normalizedPosition.y - y;

	return { x: x, y: y, rx: rx, ry: ry };
};
exports.get = get;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
var overflow = null;

var set = function set() {

	if (overflow != null) return false;

	overflow = document.body.style.overflow;
	document.body.style.overflow = 'hidden';

	return true;
};

exports.set = set;
var reset = function reset() {

	if (overflow == null) return false;

	document.body.style.overflow = overflow;
	overflow = null;

	return true;
};
exports.reset = reset;

},{}]},{},[2])(2)
});